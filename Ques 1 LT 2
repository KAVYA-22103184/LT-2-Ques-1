
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression 
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler;


iris = load_iris()
X = iris.data
y = iris.target
feature_names = iris.feature_names


df = pd.DataFrame(X, columns=feature_names)
df['TargetNames'] = y

print(df.head(10));
print(df.describe().loc[['mean', 'min', 'max']])
numerical_features = df.select_dtypes(include=['float64', 'int64']).columns
categorical_features = df.select_dtypes(include=['object']).columns


scaler = StandardScaler();
plt.figure(figsize=(10, 6))
sns.histplot(x=df['Before Scaling'], y=df['After Scaling'])
plt.title('Before Scaling vs. After Scaling')
plt.xlabel('Before')
plt.ylabel('After')
plt.show()


missing_values = df.isnull().sum()
print("\nMissing Values in Each Field:")
print(missing_values)


if missing_values.any():
   
    imputer = SimpleImputer(strategy='mean')
    df_imputed = pd.DataFrame(imputer.fit_transform(df[numerical_features]), columns=numerical_features)
    df_imputed['TargetNames'] = df['TargetNames']
else:
    df_imputed = df


X_train, X_test, y_train, y_test = train_test_split(df_imputed[numerical_features], df_imputed['HousePrice'], test_size=0.4, random_state=42)


lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)


y_test_binned = pd.cut(y_test, bins=5, labels=False)
y_pred_lr_binned = pd.cut(y_pred_lr, bins=5, labels=False)


print("\nLogistic Regression Model Performance:")
print("Accuracy:", accuracy_score(y_test_binned, y_pred_lr_binned))
print("Precision:", precision_score(y_test_binned, y_pred_lr_binned, average='macro'))
print("Recall:", recall_score(y_test_binned, y_pred_lr_binned, average='macro'))
print("F1 Score:", f1_score(y_test_binned, y_pred_lr_binned, average='macro'))

